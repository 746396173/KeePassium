//
//  CryptoTests.swift
//  KeePassiumLibTests
//
//  Created by Andrei Popleteev on 2019-04-23.
//  Copyright Â© 2019 Andrei Popleteev. All rights reserved.
//

import XCTest
@testable import KeePassiumLib

class CryptoTests: XCTestCase {

    // MARK: - AES tests
    
    func testAES() {
        // AES 256 CBC test vectors from NIST SP800-38a
        // https://doi.org/10.6028/NIST.SP.800-38A
        let key = ByteArray(hexString: "603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4")!
        let aes = AESDataCipher()
        
        let result1 = try? aes.encrypt(
            plainText: ByteArray(hexString: "6bc1bee22e409f96e93d7e117393172a")!,
            key: key,
            iv: ByteArray(hexString: "000102030405060708090a0b0c0d0e0f")!)
        XCTAssertNotNil(result1)
        result1?.trim(toCount: 16) // drop the (automatically added) PKCS7 padding
        let expectedResult1 = ByteArray(hexString: "f58c4c04d6e5f1ba779eabfb5f7bfbd6")!
        XCTAssertEqual(result1, expectedResult1)

        let result2 = try? aes.encrypt(
            plainText: ByteArray(hexString: "ae2d8a571e03ac9c9eb76fac45af8e51")!,
            key: key,
            iv: result1!)
        XCTAssertNotNil(result2)
        result2?.trim(toCount: 16) // drop the padding
        let expectedResult2 = ByteArray(hexString: "9cfc4e967edb808d679f777bc6702c7d")!
        XCTAssertEqual(result2, expectedResult2)

        let result3 = try? aes.encrypt(
            plainText: ByteArray(hexString: "30c81c46a35ce411e5fbc1191a0a52ef")!,
            key: key,
            iv: result2!)
        XCTAssertNotNil(result3)
        result3?.trim(toCount: 16) // drop the padding
        let expectedResult3 = ByteArray(hexString: "39f23369a9d9bacfa530e26304231461")!
        XCTAssertEqual(result3, expectedResult3)

    }
    
    // MARK: - Salsa20 tests
    // Based on (Google-cached version of) http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/reduced/12-rounds/verified.test-vectors?rev=182&view=markup

    func testSalsa20_set6_vector3() {
        let salsa20 = Salsa20(
            key: ByteArray(bytes: [
                0x0F, 0x62, 0xB5, 0x08, 0x5B, 0xAE, 0x01, 0x54,
                0xA7, 0xFA, 0x4D, 0xA0, 0xF3, 0x46, 0x99, 0xEC,
                0x3F, 0x92, 0xE5, 0x38, 0x8B, 0xDE, 0x31, 0x84,
                0xD7, 0x2A, 0x7D, 0xD0, 0x23, 0x76, 0xC9, 0x1C]
            ),
            iv: ByteArray(bytes: [0x28, 0x8F, 0xF6, 0x5D, 0xC4, 0x2B, 0x92, 0xF9])
        )
        
        let result = try? salsa20.encrypt(data: ByteArray(count: 16))
        XCTAssertNotNil(result)

        let expectedResult = ByteArray(bytes: [
            0x5E, 0x5E, 0x71, 0xF9, 0x01, 0x99, 0x34, 0x03,
            0x04, 0xAB, 0xB2, 0x2A, 0x37, 0xB6, 0x62, 0x5B])
        XCTAssertEqual(result, expectedResult)
    }
    
    // MARK: - ChaCha20 tests
    
    func testChaCha20_rfc7539_section_2_3_2() {
        // https://tools.ietf.org/html/rfc7539#section-2.3.2
        let chacha20 = ChaCha20(
            key: ByteArray(hexString: "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
            iv: ByteArray(hexString: "000000090000004a00000000")!
        )
        let _ = try? chacha20.encrypt(data: ByteArray(count: 64)) // skip first block
        let result = try? chacha20.encrypt(data: ByteArray(count: 64))
        XCTAssertNotNil(result)

        let expectedResult = ByteArray(bytes: [
            0x10, 0xF1, 0xE7, 0xE4, 0xD1, 0x3B, 0x59, 0x15,
            0x50, 0x0F, 0xDD, 0x1F, 0xA3, 0x20, 0x71, 0xC4,
            0xC7, 0xD1, 0xF4, 0xC7, 0x33, 0xC0, 0x68, 0x03,
            0x04, 0x22, 0xAA, 0x9A, 0xC3, 0xD4, 0x6C, 0x4E,
            0xD2, 0x82, 0x64, 0x46, 0x07, 0x9F, 0xAA, 0x09,
            0x14, 0xC2, 0xD7, 0x05, 0xD9, 0x8B, 0x02, 0xA2,
            0xB5, 0x12, 0x9C, 0xD1, 0xDE, 0x16, 0x4E, 0xB9,
            0xCB, 0xD0, 0x83, 0xE8, 0xA2, 0x50, 0x3C, 0x4E])
        XCTAssertEqual(result, expectedResult)
    }
    
    func testChaCha20_rfc7539_section_2_4_2() {
        // https://tools.ietf.org/html/rfc7539#section-2.4.2
        let chacha20 = ChaCha20(
            key: ByteArray(hexString: "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
            iv: ByteArray(hexString: "000000000000004a00000000")!
        )
        let plainData =
            ("Ladies and Gentlemen of the class of '99: " +
            "If I could offer you only one tip for the future, " +
            "sunscreen would be it.").utf8data

        let _ = try? chacha20.encrypt(data: ByteArray(count: 64)) // skip first block
        let result = try? chacha20.encrypt(data: ByteArray(data: plainData))
        XCTAssertNotNil(result)
        
        let expectedResult = ByteArray(bytes: [
            0x6E, 0x2E, 0x35, 0x9A, 0x25, 0x68, 0xF9, 0x80,
            0x41, 0xBA, 0x07, 0x28, 0xDD, 0x0D, 0x69, 0x81,
            0xE9, 0x7E, 0x7A, 0xEC, 0x1D, 0x43, 0x60, 0xC2,
            0x0A, 0x27, 0xAF, 0xCC, 0xFD, 0x9F, 0xAE, 0x0B,
            0xF9, 0x1B, 0x65, 0xC5, 0x52, 0x47, 0x33, 0xAB,
            0x8F, 0x59, 0x3D, 0xAB, 0xCD, 0x62, 0xB3, 0x57,
            0x16, 0x39, 0xD6, 0x24, 0xE6, 0x51, 0x52, 0xAB,
            0x8F, 0x53, 0x0C, 0x35, 0x9F, 0x08, 0x61, 0xD8,
            0x07, 0xCA, 0x0D, 0xBF, 0x50, 0x0D, 0x6A, 0x61,
            0x56, 0xA3, 0x8E, 0x08, 0x8A, 0x22, 0xB6, 0x5E,
            0x52, 0xBC, 0x51, 0x4D, 0x16, 0xCC, 0xF8, 0x06,
            0x81, 0x8C, 0xE9, 0x1A, 0xB7, 0x79, 0x37, 0x36,
            0x5A, 0xF9, 0x0B, 0xBF, 0x74, 0xA3, 0x5B, 0xE6,
            0xB4, 0x0B, 0x8E, 0xED, 0xF2, 0x78, 0x5E, 0x42,
            0x87, 0x4D])
        XCTAssertEqual(result, expectedResult)
    }
    
    func testChaCha20_strombergson() {
        // https://tools.ietf.org/html/draft-strombergson-chacha-test-vectors-01
        let key = ByteArray(bytes: [
            0xC4, 0x6E, 0xC1, 0xB1, 0x8C, 0xE8, 0xA8, 0x78,
            0x72, 0x5A, 0x37, 0xE7, 0x80, 0xDF, 0xB7, 0x35,
            0x1F, 0x68, 0xED, 0x2E, 0x19, 0x4C, 0x79, 0xFB,
            0xC6, 0xAE, 0xBE, 0xE1, 0xA6, 0x67, 0x97, 0x5D])
        let iv = ByteArray(bytes: [
            0x00, 0x00, 0x00, 0x00, 0x1A, 0xDA, 0x31, 0xD5,
            0xCF, 0x68, 0x82, 0x21])
        let chacha20 = ChaCha20(key: key, iv: iv)
        let result = try? chacha20.decrypt(data: ByteArray(count: 128))
        XCTAssertNotNil(result)
        
        let expectedResult = ByteArray(bytes: [
            0xF6, 0x3A, 0x89, 0xB7, 0x5C, 0x22, 0x71, 0xF9,
            0x36, 0x88, 0x16, 0x54, 0x2B, 0xA5, 0x2F, 0x06,
            0xED, 0x49, 0x24, 0x17, 0x92, 0x30, 0x2B, 0x00,
            0xB5, 0xE8, 0xF8, 0x0A, 0xE9, 0xA4, 0x73, 0xAF,
            0xC2, 0x5B, 0x21, 0x8F, 0x51, 0x9A, 0xF0, 0xFD,
            0xD4, 0x06, 0x36, 0x2E, 0x8D, 0x69, 0xDE, 0x7F,
            0x54, 0xC6, 0x04, 0xA6, 0xE0, 0x0F, 0x35, 0x3F,
            0x11, 0x0F, 0x77, 0x1B, 0xDC, 0xA8, 0xAB, 0x92,
            0xE5, 0xFB, 0xC3, 0x4E, 0x60, 0xA1, 0xD9, 0xA9,
            0xDB, 0x17, 0x34, 0x5B, 0x0A, 0x40, 0x27, 0x36,
            0x85, 0x3B, 0xF9, 0x10, 0xB0, 0x60, 0xBD, 0xF1,
            0xF8, 0x97, 0xB6, 0x29, 0x0F, 0x01, 0xD1, 0x38,
            0xAE, 0x2C, 0x4C, 0x90, 0x22, 0x5B, 0xA9, 0xEA,
            0x14, 0xD5, 0x18, 0xF5, 0x59, 0x29, 0xDE, 0xA0,
            0x98, 0xCA, 0x7A, 0x6C, 0xCF, 0xE6, 0x12, 0x27,
            0x05, 0x3C, 0x84, 0xE4, 0x9A, 0x4A, 0x33, 0x32])
        XCTAssertEqual(result, expectedResult)
    }
}
